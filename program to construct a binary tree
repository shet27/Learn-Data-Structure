/*Given an array of elements, construct a complete binary tree from 
this array in level order fashion. That is, elements from left in 
the array will be filled in the tree level wise starting from
level 0.
Ex: Input : arr[] = {1, 2, 3, 4, 5, 6}
Output : Root of the following tree
1
/\
2 3
/  \ 
4  5 6

*/


#include <stdio.h>
#include<stdlib.h>

struct node {
    int data;
    struct node *left, *right;
};
 
struct node* newNode(int data);
struct node* newNode(int data)
{
    struct node* node
        = (struct node*)malloc(sizeof(struct node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
 
    return (node);
}

int height(struct node * node) {
  if (node == NULL)
    return 0;
  else {
    int lheight = height(node -> left);
    int rheight = height(node -> right);
    if (lheight > rheight)
      return (lheight + 1);
    else return (rheight + 1);
  }
}

void CurrentLevel(struct node * root, int level) {
  if (root == NULL)
    return;
  if (level == 1)
    printf("%d ", root -> data);
  else if (level > 1) {
    CurrentLevel(root -> left, level - 1);
    CurrentLevel(root -> right, level - 1);
  }
}

void print_level(struct node* root, int level_no) {
    // Prints the nodes in the tree
    // having a level = level_no
    
    // We have a auxiliary root node
    // for printing the root of every
    // subtree
    if (!root)
        return;
    if (level_no == 0) {
        // We are at the top of a subtree
        // So print the auxiliary root node
        printf("%d -> ", root->data);
    }
    else {
        // Make the auxiliary root node to
        // be the left and right nodes for
        // the subtrees and decrease level by 1, since
        // you are moving from top to bottom
        print_level(root->left, level_no - 1);
        print_level(root->right, level_no - 1);
    }

}


int tree_height(struct node* root) {
    // Get the height of the tree
    if (!root)
        return 0;
    else {
        // Find the height of both subtrees
        // and use the larger one
        int left_height = tree_height(root->left);
        int right_height = tree_height(root->right);
        if (left_height >= right_height)
            return left_height + 1;
        else
            return right_height + 1;
    }
}

void LevelOrder(struct node * root) {
  int h = height(root);
  int i;
  for (i = 1; i <= h; i++)
    CurrentLevel(root, i);
}
void print_tree_level_order(struct node* root) {
    if (!root)
        return;
    int height = tree_height(root);
    for (int i=0; i<height; i++) {
        printf("Level %d: ", i);
        print_level(root, i);
        printf("\n");
    }
    printf("\n\n-----Complete Level Order Traversal:-----\n");
    for (int i=0; i<height; i++) {
        print_level(root, i);
    }
    printf("\n");
}

int main() {
	// Your code goes here;
	struct node* root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
	LevelOrder(root);
	print_tree_level_order(root);
	return 0;
	}
